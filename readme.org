A CLI for quickly summarizing story points in Trello lists

#+BEGIN_EXAMPLE
Card Counter 0.5.0-beta2
Justin Barclay <justincbarclay@gmail.com>
A CLI to summarize the score in your Trello lists.

USAGE:
    card-counter [FLAGS] [OPTIONS] [SUBCOMMAND]

FLAGS:
    -d, --detailed    Prints detailed stats for your Trello lists, including the change in cards and scores from a
                      previous run.
    -h, --help        Prints help information
    -V, --version     Prints version information

OPTIONS:
    -b, --board-id <ID>          The ID of the board where the cards are meant to be counted from.
    -D, --database <DATABASE>    Choose the database you want to save current request in. [default: local]  [possible
                                 values: local, aws]
    -f, --filter <FILTER>        Filters out all lists with a name that contains the substring FILTER
    -s, --save <SAVE>            Save the current entry in the database. [default: true]

SUBCOMMANDS:
    config    Edit properties associated with card-counter
    help      Prints this message or the help of the given subcommand(s)
#+END_EXAMPLE
** Getting Started for Getting Started
Before you can even think about getting started, you will need a Trello account. If you don't have a Trello account, I recommend [[https://trello.com/signup][getting one]]. Now that you've signed-up, _I_ am personally asking you to use it for a while. But not just use it, breathe it, live it, feel it deep down between your toes. I believe that once you've cleaned Trello out of those hard to reach spots you are ready to decide if you want to start tracking the progress you make in your sprints. No, not that type of sprinting, I mean [[https://www.atlassian.com/agile/scrum/sprints][sprinting]].

Finally, you've got a Trello account and you've created some boards. Within those boards you've created stacks of lists of cards. And within each card, you've started pointing them. You have started pointing them, haven't you? Ok, [[https://en.wikipedia.org/wiki/Fibonacci_scale_(agile)][point]] some cards and then come back here.

Great! You've got the theory down. I decree that you are an official agile scrum master. I even made a certificate for you.
[[./images/certificate_of_mastery.png]]

Finally, finally, let's figure out how to use card-counter.

** Getting Started
You can begin thinking about getting started with ~card-counter~ now. But before you actually can begin thinking about ~card-counter~, you'll need to get your developer [[https://trello.com/app-key][API key]] from Trello. Save this key somewhere. We'll need it later. After you have the ~API key~, we also need to generate a ~Trello API token~. To generate the token, you'll need to go to [[https://trello.com/1/authorize?expiration=1day&name=card-counter&scope=read&response_type=token&key=<your-key-here>]] and give ~card-counter~ permission to read the details from your board. Don't worry all the information ~card-counter~ pulls down from the API is processed and stored locally on your machine. Copy that token, we'll be using it next.

Perfect! We have collected the ~API key~ and ~API token~. We just need to tell ~card-counter~ about them. 

You can do that by setting them as environment variables:
#+BEGIN_SRC bash
export TRELLO_API_KEY=<your API key>
export TRELLO_API_TOKEN=<your API token>
#+END_SRC

Or you set them in the config file:
#+BEGIN_SRC bash
card-counter config
#+END_SRC

There! We're done thinking about getting started. ~card-counter~ now knows enough about you to start talking to the Trello API! If you're curious what information ~card-counter~ stores, you can find the config file and local database in ~$HOME/.card-counter/~

** Examples
When I first run ~card-counter~ on a new machine. I run the config command. This allows me to set things like my Trello access information and my preferred database.
#+BEGIN_SRC bash
card-counter config
#+END_SRC

After that, I'll usually run
#+BEGIN_SRC bash
card-counter 
#+END_SRC
This will bring up a list of boards you have access to and allow you to choose what board you want to run the command on.

If I know I'm going be running card-counter on the same board all the time, I might use the --board, -b, option and use the board-id. You can find the board-id in the URL for your board.

A typical Trello board URL looks like:
https://trello.com/b/<board-id>/<your-board>

For example: if I want to use the Trello board-id for my ~card-counter~, https://trello.com/b/wtPNQDEV/card-counter, I would use "wtPNQDEV" as the board-id.
#+BEGIN_SRC bash
card-counter --board-id wtPNQDEV 
#+END_SRC

Finally, if I have a board that is a little noisy, I can filter out lists that I don't want to track or see information about. I can do this by using the filter flag. If I add a substring to the list(s), such as [ignore], ~card-counter~ can filter out these lists for you. Be careful however, the filter function is case sensitive.
#+BEGIN_SRC bash
card-counter --board-if wtPNQDEV --filter ignore 
#+END_SRC

** Remote Storage
*** Aws
Support for syncing your or your team's stats to a DynamoDB was added in version 0.5.0. Finally, it's not just your responsibility to track your team's sprint progress!

**** Authentication
~card-counter~ will check several locations for your AWS credentials and Region. 
In order:
1. Environment Variables
2. Credential Files
3. IAM ECS Container Profile
4. IAM EC2 Instance Profile

**** DynamoDB Table
When running ~card-counter~ with AWS as the preferred database system, if it can't find the table ~card-counter~ in DynamoDB (for your region), it will prompt you to create one for you.

If you would like to manage the table yourself, the terraform code below can help you set it up.
#+NAME: DynamoDB config
#+BEGIN_SRC terraform
resource "aws_dynamodb_table" "basic-dynamodb-table" {
  name           = "card-counter"
  billing_mode   = "PROVISIONED"
  read_capacity  = 1
  write_capacity = 1
  hash_key       = "board_id"
  range_key      = "time_stamp"

  attribute {
    name = "board_id"
    type = "S"
  }

  attribute {
    name = "time_stamp"
    type = "N"
  }

  tags = {
    Name        = "dynamodb-table-1"
    Environment = "production"
  }
}
#+END_SRC
 
** Build from source
Don't trust the binaries I provide you? If you follow the stranger danger philosophy, I can't blame you. But I do have a solution, you can easily* build this from source.

\* Easy if you already have rust and cargo installed
#+BEGIN_SRC bash
git clone https://github.com/justinbarclay/card-counter.git
cd card-counter
cargo install --path .
#+END_SRC

And you're now able to run ~card-counter~ from source! Well, as long as ~$HOME/.cargo/bin~ can be found on your path.
